$computer= Get-WmiObject Win32_Computersystem
if ($computer.model -like "Synergy*" -and ($env:computername -notlike "*CU*" )) 

{
# Create Teamin LB Dynamic

Get-NetAdapter | ? status -ne up | Enable-NetAdapter

$i=1
$adapters  = Get-NetAdapter | ? linkspeed -eq "10 Gbps"
foreach ($adapter in $adapters)
{
$adapter
 rename-NetAdapter $adapter.interfacealias -newname "Production $i" 
$i=$i+1
}

New-netlbfoteam -name "Production" -TeamingMode switchindependent -TeamMembers "Production 1" -LoadBalancingAlgorithm HyperVPort -Confirm:$false
Add-NetLbfoTeamMember -Name "Production 2" -Team "Production" -Confirm:$false

# MTU to 1500 for NIC Prod

Get-WMIObject -Classname 'Win32_NetworkAdapterConfiguration' | Where-Object {$_.Description -like "Microsoft Network Adapter Multiplexor Driver"}| ForEach-Object {
Remove-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\$($_.SettingID)" -Name 'MTU'
New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\$($_.SettingID)" -Name 'MTU' -PropertyType DWORD -Value 1500}
Restart-netadapter production
}


if ($computer.model -like "ProLiant XL420*" -and ($env:computername -notlike "*CU*" )) 

{
Get-NetAdapter | ? status -ne up | Enable-NetAdapter
$adapters  = Get-NetAdapter | where  {$_.name -like "*Port 1" -and $_.name -notlike "*LOM*"  }
$i=1

foreach ($adapter in $adapters)
{
$adapter
 rename-NetAdapter $adapter.interfacealias -newname "Production $i" 
$i=$i+1
}

New-netlbfoteam -name "Production" -TeamingMode switchindependent -TeamMembers "Production 1" -LoadBalancingAlgorithm HyperVPort -Confirm:$false
Add-NetLbfoTeamMember -Name "Production 2" -Team "Production" -Confirm:$false

$adapters  = Get-NetAdapter | where  {$_.name -like "*Port 2" -and $_.name -notlike "*LOM*"  }
$i=1

foreach ($adapter in $adapters)
{
$adapter
 rename-NetAdapter $adapter.interfacealias -newname "Replication $i" 
$i=$i+1
}

New-netlbfoteam -name "Replication" -TeamingMode switchindependent -TeamMembers "Replication 1" -LoadBalancingAlgorithm HyperVPort -Confirm:$false
Add-NetLbfoTeamMember -Name "Replication 2" -Team "Replication" -Confirm:$false

# MTU to 1500 for NIC Prod

Get-WMIObject -Classname 'Win32_NetworkAdapterConfiguration' | Where-Object {$_.Description -like "Microsoft Network Adapter Multiplexor Driver"}| ForEach-Object {
Remove-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\$($_.SettingID)" -Name 'MTU'
New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\$($_.SettingID)" -Name 'MTU' -PropertyType DWORD -Value 1500}
Restart-netadapter Production
Restart-netadapter Replication
}

if (($computer.model -like "Synergy*") -and ($env:computername -like "*CU*" ))
{

################################################################################################################################################
#Production Interfaces + Teaming
################################################################################################################################################

# Get Information in DB

    $computerName = $env:computername
    $SQLSERVER="nsdiv.emea.cib\is_nsdiv_prd" 
    $DATABASE="ICW"
    $SqlConnection = New-Object System.Data.SqlClient.SqlConnection 
    $SqlConnection.ConnectionString = "Server=nsdiv.emea.cib\IS_NSDIV_PRD;USER ID='IP_Read';PASSWORD='ipcalyonread';Trusted_Connection=NO;Initial Catalog=ICW;" 
    $SqlCmd = New-Object System.Data.SqlClient.SqlCommand 
    $SqlCmd.CommandText = "Select  * from IP_PROD where computer = '"+$computerName+"'"
    $SqlCmd.Connection = $SqlConnection 
    $SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
    $SqlAdapter.SelectCommand = $SqlCmd 
    $DataSets= New-Object System.Data.DataSet 
    $SqlAdapter.Fill($DataSets) | Out-Null
    $results= $Datasets.Tables[0]
    $SqlConnection.Close()
    

# Enable All Interfaces 
Get-NetAdapter | ? status -ne up | Enable-NetAdapter
$IscsiIp = [System.Net.Dns]::GetHostAddresses($env:computername+"_Iscsi1").IPAddressToString 
$Integration  = Get-NetIPAddress | where {($_.InterfaceAlias -like "*ether*" -or $_.InterfaceAlias -like "PCIe*" -or $_.InterfaceAlias -like "Integration*") -and $_.PrefixOrigin -EQ "DHCP" }
#Get-NetAdapter -InterfaceIndex $Integration.ifIndex | Disable-NetAdapter -Confirm:$false
#Get-NetAdapter | ? MacAddress -EQ  ($results[0]."mac address").Replace(":","-") | rename-NetAdapter -newname "Production 1"

$adapters  = Get-NetIPAddress | where {($_.InterfaceAlias -like "*ether*" -or $_.InterfaceAlias -like "PCIe*") -and $_.PrefixOrigin -NE "DHCP" }
#Calculate Mask CIDR Format
  $result = 0; 
  [IPAddress] $ip = $Results[0].Mask
  $octets = $ip.IPAddressToString.Split('.')

  foreach($octet in $octets)
  {
    while(0 -ne $octet) 
    {
      $octet = ($octet -shl 1) -band [byte]::MaxValue
      $result++; 
    }
  }

$ProdMask =$result
$ProdIp = $results[0].IP
$ProdGateway = $results[0].Gateway

$i=1
Foreach ($adapter in $adapters)
{
    New-NetIPAddress -IPAddress $ProdIp -InterfaceAlias $adapter.interfacealias -PrefixLength $ProdMask | out-null
    Sleep 10
    $Test = Test-NetConnection $ProdGateway 
    $adapter.InterfaceAlias
    $test
    If ( ($Test.SourceAddress.IPAddress -eq $ProdIp) -and ($Test.PingSucceeded -eq $True ) )
    {
    rename-NetAdapter $adapter.interfacealias -newname "Production $i"
    $i = $i+1
    }
    Remove-NetIPAddress $ProdIP -Confirm:$false
    
}


New-netlbfoteam -name "Production" -TeamingMode switchindependent -TeamMembers "Production 1" -LoadBalancingAlgorithm HyperVPort -Confirm:$false
Sleep 2
$TeamMembers = Get-NetAdapter Production* | ? Name -NE "Production 1"

foreach ($TeamMember in $TeamMembers)
{
    Add-NetLbfoTeamMember -Name $TeamMember.NAme -Team "Production" -confirm:$False
}



################################################################################################################################################
#ISCSI Interfaces
################################################################################################################################################
If ($IscsiIp -ne $null)
{

$adapters  = Get-NetIPAddress | where {($_.InterfaceAlias -like "*ether*" -or $_.InterfaceAlias -like "PCIe*") -and $_.PrefixOrigin -NE "DHCP" }


$IscsiMask = 20

$IscsiGateway ="10.146.208.1"
$i=1
Foreach ($adapter in $adapters)
{
    New-NetIPAddress -IPAddress $IscsiIp -InterfaceAlias $adapter.InterfaceAlias -PrefixLength $IscsiMask | out-null
    Sleep 5
    $Test = Test-NetConnection $IscsiGateway 
    $test.InterfaceAlias
    If ( ($Test.SourceAddress.IPAddress -eq $IscsiIp) -and ($Test.PingSucceeded -eq $True )) 
    {
    rename-NetAdapter $adapter.interfacealias -newname "Iscsi_$i"
    $i = $i+1
    }
    Remove-NetIPAddress $IscsiIp -Confirm:$false
    Set-NetIPInterface -InterfaceIndex $adapter.ifIndex -Dhcp Enabled
    
}

}

Get-NetAdapter -InterfaceIndex $Integration.ifIndex | Enable-NetAdapter

}

if ($computer.model -like "Gen11*" -and ($env:computername -notlike "*CU*" )) 

{
# Create Teamin LB Dynamic

Get-NetAdapter | ? status -ne up | Enable-NetAdapter

$i=1
$adapters  = Get-NetAdapter | ? linkspeed -eq "10 Gbps"
foreach ($adapter in $adapters)
{
$adapter
 rename-NetAdapter $adapter.interfacealias -newname "Production $i" 
$i=$i+1
}

New-netlbfoteam -name "Production" -TeamingMode switchindependent -TeamMembers "Production 1" -LoadBalancingAlgorithm HyperVPort -Confirm:$false
Add-NetLbfoTeamMember -Name "Production 2" -Team "Production" -Confirm:$false

# MTU to 1500 for NIC Prod

Get-WMIObject -Classname 'Win32_NetworkAdapterConfiguration' | Where-Object {$_.Description -like "Microsoft Network Adapter Multiplexor Driver"}| ForEach-Object {
Remove-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\$($_.SettingID)" -Name 'MTU'
New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\services\Tcpip\Parameters\Interfaces\$($_.SettingID)" -Name 'MTU' -PropertyType DWORD -Value 1500}
Restart-netadapter production
}
