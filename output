# Get all network adapters that are:
# - Up (connected)
# - Have 10Gb/s link speed
$adapters = Get-NetAdapter | Where-Object { $_.Status -eq "Up" -and $_.LinkSpeed -eq 10Gb }

# Group adapters by their base InterfaceDescription (without enumeration)
$adapterGroups = $adapters | Group-Object { $_.InterfaceDescription -replace "\(\d+\)$", "" }

# Select the group with the most adapters (likely the target adapter group)
$targetAdapterGroup = $adapterGroups | Sort-Object Count -Descending | Select-Object -First 1

if ($targetAdapterGroup) {
    # Get the adapters from the target group (these are the ones to be teamed)
    $teamingAdapters = $targetAdapterGroup.Group

    # Choose the Load Balancing Algorithm based on the OS
    $loadBalancingAlgorithm = If ((Get-CimInstance Win32_OperatingSystem).Caption -match "Hyper-V") { "HyperVPort" } Else { "Dynamic" }

    # Create the teaming configuration
    $teamingConfig = @{
        Name = "Production"
        TeamMembers = $teamingAdapters.Name
        TeamingMode = "LACP"
        LoadBalancingAlgorithm = $loadBalancingAlgorithm
    }

    try {
        # Create the team
        New-NetLbfoTeam @teamingConfig

        # Set the IP address and DNS (REPLACE WITH YOUR ACTUAL VALUES)
        $ipAddress = "192.168.1.10"          # Replace with your desired IP address
        $defaultGateway = "192.168.1.1"    # Replace with your default gateway
        $dnsServers = "8.8.8.8", "8.8.4.4"  # Replace with your DNS servers

        # Calculate prefix length from subnet mask (REPLACE WITH YOUR ACTUAL SUBNET MASK)
        $subnetMask = "255.255.255.0" # Replace with your subnet mask
        $subnetMaskBytes = [System.Net.IPAddress]::Parse($subnetMask).GetAddressBytes()
        $prefixLength = 0
        foreach ($byte in $subnetMaskBytes) {
            while ($byte -band 1) {
                $prefixLength++
                $byte = $byte -shr 1
            }
        }

        New-NetIPAddress -InterfaceAlias Production -IPAddress $ipAddress -PrefixLength $prefixLength -DefaultGateway $defaultGateway
        Set-DnsClientServerAddress -InterfaceAlias Production -ServerAddresses $dnsServers

        Write-Output "Teaming successful. New interface 'Production' created and configured."
    }
    catch {
        Write-Error "Error creating team or configuring IP/DNS: $_"
    }
} else {
    Write-Warning "No suitable network adapters found for teaming."
}
